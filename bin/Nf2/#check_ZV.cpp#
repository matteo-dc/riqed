#ifdef HAVE_CONFIG_H
#include <config.hpp>
#endif

#include <complex>
#include <fstream>
#include <iostream>
#include <vector>
#include <Eigen/Dense>
#include <valarray>
#include <math.h>
#include <chrono>
#include <omp.h>

#define lambdaQCD 0.250
#define Z3 1.20206
#define Nc 3.0

using namespace std;
using namespace Eigen;
using namespace std::chrono;

//coordinates in the lattice
using coords_t=array<int,4>;

//complex double
using dcompl=complex<double>;

//propagator (12X12)
using prop_t=Matrix<dcompl,12,12>;

//list of propagators
using vprop_t=valarray<prop_t>;
using vvprop_t=valarray< valarray<prop_t> >;
using vvvprop_t=valarray< valarray< valarray<prop_t> > >;

//list of gamma for a given momentum
using qline_t=valarray<prop_t>;
using vqline_t=valarray<qline_t>;
using vvqline_t=valarray<vqline_t>;
using vert_t = vvqline_t;

//list of jackknife propagators
using jprop_t=valarray< valarray<prop_t> >;

//list of jackknife vertices
using jvert_t=valarray< vert_t >;

//valarray of complex double
using vd_t=valarray<double>;

//valarray of valarray of complex double
using vvd_t=valarray< valarray<double> > ;

//valarray of valarray of valarray of complex double
using vvvd_t=valarray< valarray< valarray<double> > >;
using vvvvd_t=valarray<vvvd_t>;
using vvvvvd_t=valarray<vvvvd_t>;

//valarray of complex double
using vdcompl_t=valarray<dcompl>;
using vvdcompl_t=valarray< vdcompl_t >;
using vvvdcompl_t=valarray< vvdcompl_t >;
using vvvvdcompl_t=valarray< vvvdcompl_t >;

//valarray of Eigen Vectors
using vXd_t=valarray<VectorXd>;

//useful notation
using jZ_t=vvd_t;
using jZbil_t=vvvvd_t;
using jproj_t=vvvvd_t;

//create Dirac Gamma matrices
vprop_t make_gamma()
{
  int NGamma=4;
  
  vprop_t gam(NGamma);
  vector< vector<int> > col(NGamma, vector<int>(4));
  vector< vector<int> > real_part(NGamma, vector<int>(4));
  vector< vector<int> > im_part(NGamma, vector<int>(4));
    
  //gamma1
  col[1]={3,2,1,0};
  real_part[1]={0,0,0,0};
  im_part[1]={-1,-1,1,1};
  //gamma2
  col[2]={3,2,1,0};
  real_part[2]={-1,1,1,-1};
  im_part[2]={0,0,0,0};
  //gamma3
  col[3]={2,3,0,1};
  real_part[3]={0,0,0,0};
  im_part[3]={-1,1,1,-1};
  //gamma4
  col[4]={2,3,0,1};
  real_part[4]={-1,-1,-1,-1};
  im_part[4]={0,0,0,0};

  for(int i_gam=0;i_gam<5;i_gam++)
    for(int i_row=0;i_row<4;i_row++)
      for(int ic=0;ic<3;ic++)
	{
	  gam[i_gam](isc(i_row,ic),isc(col[i_gam][i_row],ic))=dcompl(real_part[i_gam][i_row],im_part[i_gam][i_row] );
	}
  
  return gam;
}

//read a file
void read_mom_list(const string &path)
{
  //file
  ifstream input(path);
  if(!input.good())
    {
      cerr<<"Error opening "<<path<<endl;
      exit(1);
    }
  
  //loop until end of file
  while(!input.eof())
    {
      coords_t c;
      for(int mu=0;mu<4;mu++) input>>c[mu];
      if(input.good()) mom_list.push_back(c);
    }
}



/***********************************************************************************/
/*************************************** main **************************************/
/***********************************************************************************/

  
int main(int narg,char **arg)
{
#pragma omp parallel
#pragma omp master
  cout<<"Using "<<omp_get_num_threads()<<" threads"<<endl;

  high_resolution_clock::time_point t_START=high_resolution_clock::now();
  
  high_resolution_clock::time_point t0=high_resolution_clock::now();
  
  if (narg!=12){
    cerr<<"Number of arguments not valid: <mom file> <nconfs> <njacks> <L> <T> <initial conf_id> <step conf_id> <p2fit min> <p2fit max> <action=sym/iwa/free> <path before 'out' directory: /marconi_work/.../ >"<<endl;
    exit(0);
  }

  int nconfs=stoi(arg[2]); 
  int njacks=stoi(arg[3]);
  int clust_size=nconfs/njacks;
  int conf_id[nconfs];
  double L=stod(arg[4]),T=stod(arg[5]);
  size_t nhits=1; //!

  nm = 4;  //! to be passed from command line
  nr = 2;

  

  for(int iconf=0;iconf<nconfs;iconf++)
    conf_id[iconf]=stoi(arg[6])+iconf*stoi(arg[7]);

  cout<<"N confs = "<<nconfs<<endl;
  cout<<"N jacks = "<<njacks<<endl;
  cout<<"Clust size = "<<clust_size<<endl;
  cout<<"L = "<<L<<"\t T = "<<T<<endl;
  cout<<"Fit range = ["<<p2fit_min<<":"<<p2fit_max<<"]"<<endl;

  
  

  double beta=0.0, plaquette=0.0;
  vector<double> c_v(3), c_a(3), c_s(3), c_p(3), c_t(3);
  vector<double> c_v_em(3), c_a_em(3), c_s_em(3), c_p_em(3), c_t_em(3);

  
  
  //beta & plaquette
  if(strcmp(arg[10],"iwa")==0)  //Nf=4 (Iwasaki)
    {
      beta=1.90;
      plaquette=0.574872;

      c_v={0.2881372,-0.2095,-0.516583};
      c_a={0.9637998,-0.2095,-0.516583};
      c_s={2.02123300,-1./4.,0.376167};
      c_p={0.66990790,-1./4.,0.376167};
      c_t={0.3861012,-0.196,-0.814167};
      
      cout<<"Action:  Iwasaki"<<endl;
    }
  else if(strcmp(arg[10],"sym")==0)  //Nf=2 (Symanzik)
    {
      beta=3.90;
      plaquette=0.582591;

      c_a={1.5240798/4.,-1./3./4.,-125./288./4.};  //we divide by 4 (or 6 for T) to account for the sum on Lorentz indices
      c_v={0.6999177/4.,-1./3./4.,-125./288./4.};
      c_s={2.3547298,-1./4.,0.5};        
      c_p={0.70640549,-1./4.,0.5};
      c_t={0.9724758/6.,-13./36./6.,-161./216./6.};

      // c_a_em={0.3997992,1./16.,-13./48.};          // Wilson Action with Landau gauge
      c_a_em={0.3997992/4.,1./16./4.,-1./4./4.};
      // c_v_em={0.2394370,-3./16.,-1./4.};
      c_v_em={0.2394365/4.,-3./16./4.,-1./4./4.};
      c_s_em={0.32682365,1./2.,5./12.};        
      c_p_em={0.00609817,0.,5./12.};
      c_t_em={0.3706701/6.,-1./6./6.,-17./36./6.};

      /*   c_a_em={1000.,1000.,1000.};
	   c_v_em={1000.,1000.,1000.};
	   c_s_em={1000.,1000.,1000.};        
	   c_p_em={1000.,1000.,1000.};
	   c_t_em={1000.,1000.,1000.};*/

      cout<<"Action:  Symanzik"<<endl;
    }
  else if(strcmp(arg[10],"free")==0)  //Nf=2 (Symanzik)
    {
      // beta=99999999999999.9;
      beta = 1.0e300;
      plaquette=1.0;

      c_v={0.0,0.0,0.0};
      c_a={0.0,0.0,0.0};
      c_s={0.0,0.0,0.0};
      c_p={0.0,0.0,0.0};
      c_t={0.0,0.0,0.0};
      
      c_v_em={0.0,0.0,0.0};
      c_a_em={0.0,0.0,0.0};
      c_s_em={0.0,0.0,0.0};
      c_p_em={0.0,0.0,0.0};
      c_t_em={0.0,0.0,0.0};

      cout<<"Action:  Free"<<endl;
    }
  else
    {
      cerr<<"WARNING: wrong action argument. Please write 'sym' for Symanzik action or 'iwa' for Iwasaki action. Write 'free' for the free action.";
      exit(0);
    }

  
  string string_path = arg[11];
  
  
  
    
  //g2_tilde
  double g2=6.0/beta;
  double g2_tilde=g2/plaquette;
  
  cout<<"Beta = "<<beta<<endl;
  cout<<"Plaquette = "<<plaquette<<endl;
  cout<<"g2_tilde = "<<g2_tilde<<endl<<endl;


  
  //deltam_cr
  vvvd_t deltam_cr_array(vvd_t(vd_t(0.0,2),nmr),nmr);
  
  ifstream input_deltam;
  input_deltam.open("deltam_cr_array",ios::binary);
  
  for(int mr_fw=0;mr_fw<nmr;mr_fw++)
    for(int mr_bw=0;mr_bw<nmr;mr_bw++)
      for(int i=0;i<2;i++)
	{
	  double temp;
	  input_deltam.read((char*)&temp,sizeof(double));
	  if(not input_deltam.good())
	    {
	      cerr<<"Unable to read from deltam_cr_array mr_fw: "<<mr_fw<<", mr_bw: "<<mr_bw<<", i: "<<i<<endl;
	      exit(1);
	    }
	  deltam_cr_array[mr_fw][mr_bw][i]=temp; //store
	}

  vvd_t deltam_cr(vd_t(0.0,nmr),nmr);
  for(int mr_fw=0;mr_fw<nmr;mr_fw++)
    for(int mr_bw=0;mr_bw<nmr;mr_bw++)
      deltam_cr[mr_fw][mr_bw] = deltam_cr_array[mr_fw][mr_bw][0];


  
  //Effective Mass
  vvvd_t eff_mass_array(vvd_t(vd_t(0.0,2),nmr),nmr);

  ifstream input_effmass;
  input_effmass.open("eff_mass_array",ios::binary);
  
  for(int mr_fw=0;mr_fw<nmr;mr_fw++)
    for(int mr_bw=0;mr_bw<nmr;mr_bw++)
      for(int i=0;i<2;i++)
	{
	  double temp;
	  input_effmass.read((char*)&temp,sizeof(double));
	  if(not input_effmass.good())
	    {
	      cerr<<"Unable to read from eff_mass_array mr_fw: "<<mr_fw<<", mr_bw: "<<mr_bw<<", i: "<<i<<endl;
	      exit(1);
	    }
	  eff_mass_array[mr_fw][mr_bw][i]=temp; //store
	}

  vvd_t eff_mass(vd_t(0.0,nmr),nmr);
  for(int mr_fw=0;mr_fw<nmr;mr_fw++)
    for(int mr_bw=0;mr_bw<nmr;mr_bw++)
      eff_mass[mr_fw][mr_bw] = eff_mass_array[mr_fw][mr_bw][0];

  read_mom_list(arg[1]);
  cout<<"Read: "<<mom_list.size()<<" momenta."<<endl<<endl;


   
  //create gamma_mu matrix vector:  GAMMA={gamma1,gamma2,gamma3,gamma4}
  vprop_t GAMMA=make_gamma();

  //Define masses, R, types
  vector<string> Mass={"M0_","M1_","M2_","M3_"};
  vector<string> R={"R0_","R1_"};
  vector<string> Type={"0","F","FF","T","P"/*,"S"*/};

  int nt=Type.size();

  int combo=nm*nr*nt*nhits*nconfs;

  //number of equivalent effective masses
  int neq  = fact(nm+nr-1)/fact(nr)/fact(nm-1);  //for the Green fn.
  int neq2=nm;                                   //for Zq

  int moms=mom_list.size();


   
  //array of input files to be read in a given conf
  ifstream input[combo];


  //allmoms vectors
  vector<jZ_t> jSigma1_allmoms(moms,vvd_t(vd_t(0.0,nmr),njacks));
  vector<jZ_t> jSigma1_em_allmoms(moms,vvd_t(vd_t(0.0,nmr),njacks));
  vector<vvd_t> jSigma1_equivalent_allmoms(moms,vvd_t(vd_t(0.0,neq2),njacks));
  vector<vvd_t> jSigma1_em_equivalent_allmoms(moms,vvd_t(vd_t(0.0,neq2),njacks));

  vector<jZ_t> jZV_allmoms(moms,vvd_t(vd_t(0.0,nmr),njacks));
  vector<jZ_t> jZV_em_allmoms(moms,vvd_t(vd_t(0.0,nmr),njacks));

  vector<vvd_t> jGv_equivalent_allmoms(moms,vvd_t(vd_t(neq),njacks));
  vector<vvd_t> jGv_em_equivalent_allmoms(moms,vvd_t(vd_t(neq),njacks));

  vector<vd_t> jGv_0_chiral_allmoms(moms,vd_t(njacks));
  vector<vd_t> jGv_em_a_b_chiral_allmoms(moms,vd_t(njacks));

  vector<vd_t> jSigma1_chiral_allmoms(moms,vd_t(0.0,njacks));
  vector<vd_t> jSigma1_em_chiral_allmoms(moms,vd_t(0.0,njacks));

  vector<vd_t> jZV_chiral_allmoms(moms,vd_t(0.0,njacks));
  vector<vd_t> jZV_em_chiral_allmoms(moms,vd_t(0.0,njacks));

   
  //equivalent mass (Z)
  vd_t m_eff_equivalent(0.0,neq);
  vd_t m_eff_equivalent_Zq(0.0,neq2);

  for(int mA=0; mA<nm; mA++)
    for(int mB=mA; mB<nm; mB++)	     
      for(int r=0; r<nr; r++)
	{
	  ieq=-(mA*mA/2)+mB+mA*(nm-0.5);
	  m_eff_equivalent[ieq] += (eff_mass[r+nr*mA][r+nr*mB]+eff_mass[r+nr*mB][r+nr*mA])/(2.0*nr); //r uguali
	}

  //equivalent mass (Zq)
  for(int m=0; m<nm; m++)
    for(int r=0; r<nr; r++)
      {
	ieq=m;
	m_eff_equivalent_Zq[ieq] += eff_mass[r+nr*m][r+nr*m]/nr; //r uguali
      }
   
   

#pragma omp parallel for collapse(5)
  for(int iconf=0;iconf<nconfs;iconf++)
    for(size_t ihit=0;ihit<nhits;ihit++)
      for(int t=0;t<nt;t++)
	for(int m=0;m<nm;m++)
	  for(int r=0;r<nr;r++)
	    {
	      string hit_suffix = "";
	      if(nhits>1) hit_suffix = "_hit_" + to_string(ihit);
	       
	      int icombo=r + nr*m + nr*nm*t + nr*nm*nt*ihit + nr*nm*nt*nhits*iconf;		 
	      string path = path_to_conf(string_path,conf_id[iconf],"S_"+Mass[m]+R[r]+Type[t]+hit_suffix);
		
	      input[icombo].open(path,ios::binary);
		
	      if(!input[icombo].good())
		{cerr<<"Unable to open file "<<path<<" combo "<<icombo<<endl;
		  exit(1);}
	    }
    
  int tag=0, tag_aux=0;
  double eps=1.0e-15;
  tag_vector.push_back(0);

  for(size_t imom=0; imom<mom_list.size(); imom++)
     {
       jprop_t jS_0(valarray<prop_t>(prop_t::Zero(),nmr),njacks);		
       jprop_t jS_self_tad(valarray<prop_t>(prop_t::Zero(),nmr),njacks);
       jprop_t jS_p(valarray<prop_t>(prop_t::Zero(),nmr),njacks);

       jvert_t jVert_0 (vvvprop_t(vvprop_t(vprop_t(prop_t::Zero(),16),nmr),nmr),njacks);
       jvert_t jVert_11_self_tad (vvvprop_t(vvprop_t(vprop_t(prop_t::Zero(),16),nmr),nmr),njacks);
       jvert_t jVert_p (vvvprop_t(vvprop_t(vprop_t(prop_t::Zero(),16),nmr),nmr),njacks);
       
       jprop_t jS_em(valarray<prop_t>(prop_t::Zero(),nmr),njacks);
       jvert_t jVert_em (vvvprop_t(vvprop_t(vprop_t(prop_t::Zero(),16),nmr),nmr),njacks);

       vvvprop_t S(vvprop_t(vprop_t(prop_t::Zero(),nmr),nt),njacks);

             for(int i_in_clust=0;i_in_clust<clust_size;i_in_clust++)
	 for(size_t ihit=0;ihit<nhits;ihit++)
	   {
	     string hit_suffix = "";
	     if(nhits>1) hit_suffix = "_hit_" + to_string(ihit);
	     	       
#pragma omp parallel for collapse(4)
	     for(int t=0;t<nt;t++)
	       for(int m=0;m<nm;m++)
		 for(int r=0;r<nr;r++)
		   for(int ijack=0;ijack<njacks;ijack++)
		     {
		       int iconf=clust_size*ijack+i_in_clust;
		       
		       int icombo=r + nr*m + nr*nm*t + nr*nm*nt*ihit + nr*nm*nt*nhits*iconf;
		       string path = path_to_conf(string_path,conf_id[iconf],"S_"+Mass[m]+R[r]+Type[t]+hit_suffix);
		       int mr = r + nr*m; // M0R0,M0R1,M1R0,M1R1,M2R0,M2R1,M3R0,M3R1
		       
		       printf(" i_in_clust %d  iconf %d   ijack %d \n",i_in_clust,iconf,ijack);
       		       
		       //create all the propagators in a given conf and a given mom
		       S[ijack][t][mr] = read_prop(input[icombo],path);
		       
		       if(t==4) S[ijack][t][mr]*=dcompl(0.0,-1.0);
		       if(t==5) S[ijack][t][mr]*=dcompl(1.0,0.0);
		     }